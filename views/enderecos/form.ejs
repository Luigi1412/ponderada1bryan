<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><%= endereco ? 'Editar Endereço' : 'Novo Endereço' %></h1>
</div>
<p>Preencha os campos abaixo para criar ou editar um endereço.</p>

<form action="<%= endereco ? '/api/enderecos/api/' + endereco.id : '/api/enderecos/api' %>" method="POST" id="endereco-form" class="needs-validation" novalidate>
    <div class="row g-3 mb-3">
        <div class="col-12">
            <label for="user_id" class="form-label fw-bold">Usuário</label>
            <select class="form-select" id="user_id" name="user_id" required>
                <option value="">Carregando usuários...</option>
            </select>
            <div class="invalid-feedback">
                Por favor, selecione um usuário.
            </div>
        </div>
    </div>

    <div class="card p-3">
        <h5 class="card-title mb-3">Detalhes do Endereço</h5>
        <div class="row g-3">
            <div class="col-md-9">
                <label for="rua" class="form-label fw-bold">Rua</label>
                <input type="text" class="form-control" id="rua" name="rua" placeholder="Ex: Av. Paulista" value="<%= locals.endereco ? endereco.rua : '' %>" required>
                <div class="invalid-feedback">O nome da rua é obrigatório.</div>
            </div>
            <div class="col-md-3">
                <label for="numero" class="form-label fw-bold">Número</label>
                <input type="text" class="form-control" id="numero" name="numero" placeholder="Ex: 1000" value="<%= locals.endereco ? endereco.numero : '' %>" required>
                <div class="invalid-feedback">O número é obrigatório.</div>
            </div>
            <div class="col-md-5">
                <label for="cidade" class="form-label fw-bold">Cidade</label>
                <input type="text" class="form-control" id="cidade" name="cidade" placeholder="Ex: São Paulo" value="<%= locals.endereco ? endereco.cidade : '' %>" required>
                <div class="invalid-feedback">A cidade é obrigatória.</div>
            </div>
            <div class="col-md-4">
                <label for="estado" class="form-label fw-bold">Estado</label>
                <input type="text" class="form-control" id="estado" name="estado" placeholder="Ex: SP" value="<%= locals.endereco ? endereco.estado : '' %>" required>
                <div class="invalid-feedback">O estado é obrigatório.</div>
            </div>
            <div class="col-md-3">
                <label for="cep" class="form-label fw-bold">CEP</label>
                <input type="text" class="form-control" id="cep" name="cep" placeholder="Ex: 01310-100" value="<%= locals.endereco ? endereco.cep : '' %>" required>
                <div class="invalid-feedback">O CEP é obrigatório.</div>
            </div>
        </div>
    </div>

    <hr class="my-4">

    <div class="d-flex justify-content-end">
        <a href="/enderecos" class="btn btn-secondary me-2">Cancelar</a>
        <button class="btn btn-primary" type="submit" id="submit-btn">
            <%= locals.endereco ? 'Atualizar Endereço' : 'Salvar Endereço' %>
        </button>
    </div>
</form>

<!-- Toast para feedback -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto">Sistema</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toast-message">
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const isEditing = <%- JSON.stringify(!!endereco) %>;
    const enderecoData = <%- JSON.stringify(endereco || null) %>;
    const submitBtn = document.getElementById('submit-btn');

    // Função para mostrar toast
    function showToast(message, type = 'success') {
        const toast = document.getElementById('liveToast');
        const toastMessage = document.getElementById('toast-message');
        toastMessage.textContent = message;
        
        // Remove classes anteriores
        toast.classList.remove('bg-success', 'bg-danger', 'bg-warning');
        
        // Adiciona classe baseada no tipo
        if (type === 'error') {
            toast.classList.add('bg-danger', 'text-white');
        } else if (type === 'warning') {
            toast.classList.add('bg-warning');
        } else {
            toast.classList.add('bg-success', 'text-white');
        }
        
        // Mostra o toast
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }

    async function populateUsers() {
        const select = document.getElementById('user_id');
        try {
            console.log('Carregando usuários...');
            const response = await fetch('/api/users');
            if (!response.ok) throw new Error('Erro ao carregar usuários');
            
            const users = await response.json();
            console.log('Usuários carregados:', users);
            
            select.innerHTML = '<option value="">Selecione um usuário...</option>';
            users.forEach(user => {
                const option = document.createElement('option');
                option.value = user.id;
                option.textContent = `${user.nome} (ID: ${user.id})`;
                select.appendChild(option);
            });

            if (isEditing && enderecoData) {
                select.value = enderecoData.user_id;
            }
        } catch (error) {
            console.error('Erro ao carregar usuários:', error);
            select.innerHTML = '<option value="">Erro ao carregar usuários</option>';
            showToast('Erro ao carregar usuários', 'error');
        }
    }

    populateUsers();

    const form = document.getElementById('endereco-form');
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        console.log('Formulário submetido');
        
        // Desabilita o botão para evitar múltiplos envios
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Salvando...';
        
        if (!form.checkValidity()) {
            event.stopPropagation();
            form.classList.add('was-validated');
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<%= locals.endereco ? "Atualizar Endereço" : "Salvar Endereço" %>';
            showToast('Por favor, preencha todos os campos obrigatórios', 'warning');
            return;
        }

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        // Converte user_id para número
        data.user_id = parseInt(data.user_id);
        
        console.log('Dados do formulário:', data);
        
        // Assegura que o método PUT seja usado para edição
        const method = isEditing ? 'PUT' : 'POST';
        const actionUrl = form.getAttribute('action');

        try {
            console.log('Enviando requisição para:', actionUrl);
            console.log('Método:', method);
            console.log('Dados:', data);
            
            const response = await fetch(actionUrl, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            console.log('Resposta recebida:', response.status, response.statusText);

            if (response.ok) {
                showToast('Endereço salvo com sucesso!', 'success');
                setTimeout(() => {
                    window.location.href = '/enderecos';
                }, 1500);
            } else {
                const result = await response.json();
                console.error('Erro na resposta:', result);
                showToast('Erro ao salvar endereço: ' + (result.error || 'Erro desconhecido'), 'error');
            }
        } catch (error) {
            console.error('Erro na submissão:', error);
            showToast('Erro de conexão ao salvar o endereço', 'error');
        } finally {
            // Reabilita o botão
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<%= locals.endereco ? "Atualizar Endereço" : "Salvar Endereço" %>';
        }
    });
});
</script>