<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <h1 class="h2">Pagamentos</h1>
  <div class="btn-toolbar mb-2 mb-md-0">
    <a href="/pagamentos/novo" class="btn btn-primary">
      <i class="fas fa-plus"></i> Novo Pagamento
    </a>
  </div>
</div>
<p>Listagem e filtro de pagamentos realizados.</p>

<!-- Card Principal -->
<div class="card shadow-sm">
  <div class="card-header bg-light d-flex justify-content-between align-items-center">
    <h6 class="mb-0">
      <i class="fas fa-list-ul me-2"></i>Listagem de Pagamentos
    </h6>
    <!-- Filtros -->
    <div class="btn-group btn-group-sm" role="group" aria-label="Filtro de Status">
      <button type="button" class="btn btn-outline-primary active" data-status="">Todos</button>
      <button type="button" class="btn btn-outline-warning" data-status="Pendente">Pendente</button>
      <button type="button" class="btn btn-outline-success" data-status="Concluído">Concluído</button>
      <button type="button" class="btn btn-outline-danger" data-status="Cancelado">Cancelado</button>
    </div>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="table table-hover table-sm">
        <thead class="table-light">
          <tr>
            <th scope="col">#</th>
            <th scope="col">Reserva</th>
            <th scope="col">Cliente</th>
            <th scope="col">Valor</th>
            <th scope="col">Método</th>
            <th scope="col">Status</th>
            <th scope="col">Data</th>
            <th scope="col">Ações</th>
          </tr>
        </thead>
        <tbody id="pagamentos-tbody">
          <!-- Estado inicial de carregamento -->
          <tr>
            <td colspan="8" class="text-center p-4">
              <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
              </div>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const tbody = document.getElementById('pagamentos-tbody');
  const filterButtons = document.querySelectorAll('.btn-group[aria-label="Filtro de Status"] button');
  const loadingRow = `<tr><td colspan="8" class="text-center p-4"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Carregando...</span></div></td></tr>`;
  let currentStatus = ''; // Filtro inicial: todos

  // Função para buscar e renderizar os pagamentos
  async function fetchAndRenderPagamentos(status = '') {
    tbody.innerHTML = loadingRow;
    
    try {
      const url = status ? `/api/pagamentos/api?status=${status}` : '/api/pagamentos/api';
      const response = await fetch(url);
      
      if (!response.ok) throw new Error(`Erro na rede: ${response.statusText}`);

      const pagamentos = await response.json();
      renderTable(pagamentos);

    } catch (error) {
      console.error('Erro ao buscar pagamentos:', error);
      tbody.innerHTML = `<tr><td colspan="8" class="text-center text-danger p-4"><i class="fas fa-exclamation-triangle me-2"></i>Erro ao carregar pagamentos. Tente novamente.</td></tr>`;
    }
  }

  // Função para renderizar a tabela
  function renderTable(pagamentos) {
    tbody.innerHTML = ''; // Limpa a tabela
    
    if (!pagamentos || pagamentos.length === 0) {
      tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted p-4"><i class="fas fa-info-circle me-2"></i>Nenhum pagamento encontrado.</td></tr>';
      return;
    }

    pagamentos.forEach(pagamento => {
      const valorFormatado = `R$ ${parseFloat(pagamento.valor || 0).toFixed(2)}`;
      const dataFormatada = new Date(pagamento.data_pagamento).toLocaleDateString('pt-BR');
      
      const tr = document.createElement('tr');
      tr.id = `item-${pagamento.id}`;
      tr.innerHTML = `
        <td>${pagamento.id}</td>
        <td>#${pagamento.reserva_id}</td>
        <td>${pagamento.user_nome || 'N/A'}</td>
        <td>${valorFormatado}</td>
        <td>${pagamento.metodo}</td>
        <td><span class="badge bg-${getStatusColor(pagamento.status)}">${pagamento.status}</span></td>
        <td>${dataFormatada}</td>
        <td>
          <a href="/pagamentos/editar/${pagamento.id}" class="btn btn-sm btn-outline-primary"><i class="fas fa-edit"></i> Editar</a>
          <button onclick="deleteItem('${pagamento.id}', '/api/pagamentos/api')" class="btn btn-sm btn-outline-danger"><i class="fas fa-trash"></i> Excluir</button>
        </td>
      `;
      tbody.appendChild(tr);
    });
  }
  
  // Função para retornar a cor do badge com base no status
  function getStatusColor(status) {
    switch (status) {
      case 'Concluído': return 'success';
      case 'Pendente': return 'warning';
      case 'Cancelado': return 'danger';
      default: return 'secondary';
    }
  }

  // Event listeners para os botões de filtro
  filterButtons.forEach(button => {
    button.addEventListener('click', function() {
      // Remove a classe 'active' de todos os botões do grupo
      filterButtons.forEach(btn => btn.classList.remove('active'));
      
      // Adiciona a classe 'active' apenas ao botão clicado
      this.classList.add('active');
      
      currentStatus = this.getAttribute('data-status');
      fetchAndRenderPagamentos(currentStatus);
    });
  });

  // Carga inicial
  fetchAndRenderPagamentos();

  // Função universal para deletar item
  window.deleteItem = async function(id, apiUrl) {
    if (!confirm('Tem certeza que deseja excluir este item?')) return;
    try {
      const response = await fetch(`${apiUrl}/${id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      if (response.ok) {
        const row = document.getElementById(`item-${id}`);
        if (row) row.remove();
        alert('Pagamento excluído com sucesso!');
      } else {
        const result = await response.json();
        alert('Erro ao excluir: ' + (result.error || 'Erro desconhecido'));
      }
    } catch (error) {
      alert('Erro de conexão ao excluir o item.');
      console.error(error);
    }
  }
});
</script>