<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><%= pagamento ? 'Editar Pagamento' : 'Novo Pagamento' %></h1>
</div>
<p><%= description %></p>

<form action="<%= pagamento ? '/api/pagamentos/' + pagamento.id : '/api/pagamentos' %>" method="POST" id="pagamento-form" class="needs-validation" novalidate>
    <div class="card p-3">
        <h5 class="card-title mb-3">Detalhes do Pagamento</h5>
        <div class="row g-3">
            <div class="col-12">
                <label for="reserva_id" class="form-label fw-bold">Reserva</label>
                <select class="form-select" id="reserva_id" name="reserva_id" required>
                    <option value="">Selecione uma reserva...</option>
                    <!-- Popular com fetch no cliente -->
                </select>
                <div class="invalid-feedback">Por favor, selecione uma reserva.</div>
            </div>

            <div class="col-md-6">
                <label for="valor" class="form-label fw-bold">Valor</label>
                <div class="input-group">
                    <span class="input-group-text">R$</span>
                    <input type="number" step="0.01" class="form-control" id="valor" name="valor" placeholder="100.00" value="<%= locals.pagamento ? parseFloat(pagamento.valor).toFixed(2) : '' %>" required>
                </div>
                <div class="invalid-feedback">O valor é obrigatório.</div>
            </div>

            <div class="col-md-6">
                <label for="metodo" class="form-label fw-bold">Método de Pagamento</label>
                <input type="text" class="form-control" id="metodo" name="metodo" placeholder="Ex: Cartão de Crédito" value="<%= locals.pagamento ? pagamento.metodo : '' %>" required>
                <div class="invalid-feedback">O método de pagamento é obrigatório.</div>
            </div>
            
            <div class="col-md-6">
                <label for="status" class="form-label fw-bold">Status</label>
                <select class="form-select" id="status" name="status" required>
                    <option value="Pendente" <%= (locals.pagamento && pagamento.status === 'Pendente') ? 'selected' : '' %>>Pendente</option>
                    <option value="Concluído" <%= (locals.pagamento && pagamento.status === 'Concluído') ? 'selected' : '' %>>Concluído</option>
                    <option value="Cancelado" <%= (locals.pagamento && pagamento.status === 'Cancelado') ? 'selected' : '' %>>Cancelado</option>
                </select>
                <div class="invalid-feedback">Por favor, selecione um status.</div>
            </div>
        </div>
    </div>

    <hr class="my-4">

    <div class="d-flex justify-content-end">
        <a href="/pagamentos" class="btn btn-secondary me-2">Cancelar</a>
        <button class="btn btn-primary" type="submit">
            <%= locals.pagamento ? 'Atualizar Pagamento' : 'Salvar Pagamento' %>
        </button>
    </div>
</form>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const isEditing = <%- !!pagamento %>;
    
    async function populateReservations() {
        const select = document.getElementById('reserva_id');
        try {
            const response = await fetch('/api/reservations');
            if (!response.ok) throw new Error('Erro ao carregar reservas');
            
            const reservations = await response.json();
            
            select.innerHTML = '<option value="">Selecione uma reserva...</option>';
            reservations.forEach(res => {
                const option = document.createElement('option');
                option.value = res.id;
                option.textContent = `Reserva #${res.id} - Usuário ID: ${res.user_id}`;
                select.appendChild(option);
            });

            // Se estiver editando, seleciona a reserva correta
            if (isEditing && locals.pagamento) {
                select.value = locals.pagamento.reserva_id;
            }
        } catch (error) {
            select.innerHTML = '<option value="">Erro ao carregar reservas</option>';
            console.error(error);
        }
    }

    populateReservations();

    const form = document.getElementById('pagamento-form');
    form.addEventListener('submit', async function(event) {
        event.preventDefault();
        console.log('Form submission intercepted.');

        if (!form.checkValidity()) {
            console.log('Form is invalid. Adding "was-validated" class.');
            event.stopPropagation();
            form.classList.add('was-validated');
            return;
        }
        console.log('Form is valid.');

        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        const actionUrl = form.getAttribute('action');
        const method = form.getAttribute('method');
        
        console.log('Sending data to:', actionUrl, 'with method:', method);
        console.log('Payload:', data);

        try {
            const response = await fetch(actionUrl, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });
            
            console.log('Response status:', response.status);

            if (response.ok) {
                console.log('Response OK, redirecting...');
                window.location.href = '/pagamentos';
            } else {
                const result = await response.json();
                console.error('Server error:', result);
                alert('Erro ao salvar pagamento: ' + (result.error || 'Erro desconhecido'));
            }
        } catch (error) {
            console.error('Fetch error:', error);
            alert('Erro de conexão ao salvar o pagamento.');
        }
    });
});
</script>