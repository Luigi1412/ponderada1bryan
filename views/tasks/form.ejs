<%- contentFor('body') %>

<!-- Header -->
<div class="md:flex md:items-center md:justify-between mb-6">
    <div class="flex-1 min-w-0">
        <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate" id="form-title">
            Nova Tarefa
        </h2>
    </div>
</div>

<!-- Form -->
<div class="bg-white shadow rounded-lg">
    <form id="task-form" class="space-y-6 p-6">
        <div>
            <label for="nome" class="block text-sm font-medium text-gray-700">
                Título
                <span class="text-red-500">*</span>
            </label>
            <input type="text" name="nome" id="nome" required
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Digite o título da tarefa">
            <p class="mt-1 text-sm text-gray-500">Um título claro e conciso para sua tarefa.</p>
        </div>

        <div>
            <label for="descricao" class="block text-sm font-medium text-gray-700">
                Descrição
                <span class="text-red-500">*</span>
            </label>
            <textarea name="descricao" id="descricao" rows="4" required
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="Descreva os detalhes da tarefa"></textarea>
            <p class="mt-1 text-sm text-gray-500">Forneça uma descrição detalhada da tarefa.</p>
        </div>

        <div>
            <label for="status" class="block text-sm font-medium text-gray-700">
                Status
                <span class="text-red-500">*</span>
            </label>
            <select name="status" id="status" required
                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                <option value="Pendente">Pendente</option>
                <option value="Em Progresso">Em Progresso</option>
                <option value="Concluída">Concluída</option>
            </select>
            <p class="mt-1 text-sm text-gray-500">Selecione o status atual da tarefa.</p>
        </div>

        <div class="flex justify-end space-x-3 pt-4 border-t">
            <a href="/" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-times mr-2"></i>
                Cancelar
            </a>
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <i class="fas fa-save mr-2"></i>
                Salvar
            </button>
        </div>
    </form>
</div>

<script>
    const form = document.getElementById('task-form');
    const formTitle = document.getElementById('form-title');
    const taskId = window.location.pathname.split('/').pop();
    const isEditing = window.location.pathname.includes('editar-tarefa');

    // Se estiver editando, carrega os dados da tarefa
    if (isEditing) {
        formTitle.textContent = 'Editar Tarefa';
        loadTask(taskId);
    }

    async function loadTask(id) {
        try {
            const response = await fetch(`/api/tarefas/${id}`);
            if (!response.ok) throw new Error('Erro ao carregar tarefa');
            
            const task = await response.json();
            
            document.getElementById('nome').value = task.nome;
            document.getElementById('descricao').value = task.descricao;
            document.getElementById('status').value = task.status;
        } catch (error) {
            console.error('Erro ao carregar tarefa:', error);
            showToast('Erro ao carregar tarefa', 'error');
            setTimeout(() => window.location.href = '/', 2000);
        }
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = {
            nome: document.getElementById('nome').value.trim(),
            descricao: document.getElementById('descricao').value.trim(),
            status: document.getElementById('status').value
        };

        // Validação básica
        if (!formData.nome || !formData.descricao) {
            showToast('Por favor, preencha todos os campos obrigatórios', 'error');
            return;
        }

        try {
            const url = isEditing ? `/api/tarefas/${taskId}` : '/api/tarefas';
            const method = isEditing ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Erro ao salvar tarefa');
            }

            showToast(isEditing ? 'Tarefa atualizada com sucesso!' : 'Tarefa criada com sucesso!');
            setTimeout(() => window.location.href = '/', 1500);
        } catch (error) {
            console.error('Erro ao salvar tarefa:', error);
            showToast(error.message || 'Erro ao salvar tarefa', 'error');
        }
    });
</script> 