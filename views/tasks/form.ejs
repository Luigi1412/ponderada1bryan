<%- contentFor('body') %>

<!-- Header -->
<div class="md:flex md:items-center md:justify-between mb-6">
    <div class="flex-1 min-w-0">
        <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate" id="form-title">
            Nova Tarefa
        </h2>
    </div>
</div>

<!-- Form -->
<div class="bg-white shadow rounded-lg">
    <form id="task-form" class="space-y-6 p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label for="projeto_id" class="block text-sm font-medium text-gray-700">Projeto</label>
                <select name="projeto_id" id="projeto_id" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <option value="">Nenhum projeto</option>
                </select>
            </div>
            <div>
                <label for="responsavel_id" class="block text-sm font-medium text-gray-700">Responsável</label>
                <select name="responsavel_id" id="responsavel_id" class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    <option value="">Ninguém</option>
                </select>
            </div>
        </div>
        
        <div>
            <label for="nome" class="block text-sm font-medium text-gray-700">Título <span class="text-red-500">*</span></label>
            <input type="text" name="nome" id="nome" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" placeholder="Digite o título da tarefa">
        </div>

        <div>
            <label for="descricao" class="block text-sm font-medium text-gray-700">Descrição <span class="text-red-500">*</span></label>
            <textarea name="descricao" id="descricao" rows="4" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm" placeholder="Descreva os detalhes da tarefa"></textarea>
        </div>

        <div>
            <label for="status" class="block text-sm font-medium text-gray-700">Status <span class="text-red-500">*</span></label>
            <select name="status" id="status" required class="mt-1 block w-full border-gray-300 rounded-md shadow-sm">
                <option value="Pendente">Pendente</option>
                <option value="Em Progresso">Em Progresso</option>
                <option value="Concluída">Concluída</option>
            </select>
        </div>

        <div class="flex justify-end space-x-3 pt-4 border-t">
            <a href="/" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Cancelar</a>
            <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">Salvar Tarefa</button>
        </div>
    </form>
</div>

<script>
    const form = document.getElementById('task-form');
    const formTitle = document.getElementById('form-title');
    const taskId = window.location.pathname.split('/').pop();
    const isEditing = window.location.pathname.includes('editar-tarefa');
    
    // Função para popular selects
    async function populateSelect(url, selectId, valueField, textField, defaultOption) {
        const select = document.getElementById(selectId);
        try {
            const response = await fetch(url);
            if (!response.ok) throw new Error(`Erro ao carregar ${selectId}`);
            const items = await response.json();
            items.forEach(item => {
                const option = document.createElement('option');
                option.value = item[valueField];
                option.textContent = item[textField];
                select.appendChild(option);
            });
        } catch (error) {
            console.error(error);
            const option = document.createElement('option');
            option.textContent = `Erro ao carregar ${defaultOption}`;
            option.disabled = true;
            select.appendChild(option);
        }
    }

    // Carrega dados para os selects
    populateSelect('/api/projetos', 'projeto_id', 'id', 'nome', 'projetos');
    populateSelect('/api/users', 'responsavel_id', 'id', 'nome', 'usuários');

    async function loadTask(id) {
        try {
            const response = await fetch(`/api/tarefas/${id}`);
            if (!response.ok) throw new Error('Erro ao carregar tarefa');
            const task = await response.json();
            
            document.getElementById('nome').value = task.nome;
            document.getElementById('descricao').value = task.descricao;
            document.getElementById('status').value = task.status;
            document.getElementById('projeto_id').value = task.projeto_id;
            document.getElementById('responsavel_id').value = task.responsavel_id;
        } catch (error) {
            showToast('Erro ao carregar tarefa', 'error');
            setTimeout(() => window.location.href = '/', 2000);
        }
    }

    if (isEditing) {
        formTitle.textContent = 'Editar Tarefa';
        loadTask(taskId);
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = {
            nome: document.getElementById('nome').value.trim(),
            descricao: document.getElementById('descricao').value.trim(),
            status: document.getElementById('status').value,
            projeto_id: document.getElementById('projeto_id').value || null,
            responsavel_id: document.getElementById('responsavel_id').value || null,
        };

        if (!formData.nome || !formData.descricao) {
            showToast('Título e Descrição são obrigatórios.', 'error');
            return;
        }

        try {
            const url = isEditing ? `/api/tarefas/${taskId}` : '/api/tarefas';
            const method = isEditing ? 'PUT' : 'POST';

            const response = await fetch(url, {
                method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            if (!response.ok) throw new Error('Erro ao salvar tarefa');

            showToast(isEditing ? 'Tarefa atualizada!' : 'Tarefa criada!');
            setTimeout(() => window.location.href = '/', 1500);
        } catch (error) {
            showToast('Erro ao salvar tarefa', 'error');
        }
    });
</script> 