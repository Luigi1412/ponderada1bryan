<%- contentFor('body') %>

<!-- Header -->
<div class="md:flex md:items-center md:justify-between mb-6">
    <div class="flex-1 min-w-0">
        <h2 class="text-2xl font-bold leading-7 text-gray-900 sm:text-3xl sm:truncate">
            Minhas Tarefas
        </h2>
    </div>
    <div class="mt-4 flex md:mt-0 md:ml-4">
        <a href="/nova-tarefa" class="ml-3 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            <i class="fas fa-plus mr-2"></i>
            Nova Tarefa
        </a>
    </div>
</div>

<!-- Task Grid -->
<div class="grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-3" id="tasks-container">
    <!-- Tasks will be loaded here -->
</div>

<!-- Task Template -->
<template id="task-template">
    <div class="task-card bg-white rounded-lg shadow p-6 fade-in">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-medium text-gray-900 task-title"></h3>
            <span class="task-status px-3 py-1 rounded-full text-xs font-medium"></span>
        </div>
        <p class="text-gray-500 mb-4 task-description line-clamp-3"></p>
        <div class="flex items-center justify-between text-sm">
            <span class="text-gray-400 task-date"></span>
            <div class="flex space-x-3">
                <button class="edit-task text-indigo-600 hover:text-indigo-900">
                    <i class="fas fa-edit mr-1"></i>
                    Editar
                </button>
                <button class="delete-task text-red-600 hover:text-red-900">
                    <i class="fas fa-trash-alt mr-1"></i>
                    Excluir
                </button>
            </div>
        </div>
    </div>
</template>

<script>
    async function loadTasks() {
        try {
            const response = await fetch('/api/tarefas');
            if (!response.ok) throw new Error('Erro ao carregar tarefas');
            
            const tasks = await response.json();
            const container = document.getElementById('tasks-container');
            const template = document.getElementById('task-template');
            
            container.innerHTML = '';
            
            if (tasks.length === 0) {
                container.innerHTML = `
                    <div class="col-span-full text-center py-12">
                        <i class="fas fa-tasks text-gray-400 text-5xl mb-4"></i>
                        <p class="text-gray-500 text-lg">Nenhuma tarefa encontrada</p>
                        <a href="/nova-tarefa" class="mt-4 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                            Criar primeira tarefa
                        </a>
                    </div>
                `;
                return;
            }

            tasks.forEach(task => {
                const clone = template.content.cloneNode(true);
                
                clone.querySelector('.task-title').textContent = task.nome;
                clone.querySelector('.task-description').textContent = task.descricao;
                clone.querySelector('.task-date').textContent = new Date(task.created_at).toLocaleDateString('pt-BR');
                
                const statusElement = clone.querySelector('.task-status');
                const statusConfig = {
                    'Pendente': { text: 'Pendente', classes: 'bg-yellow-100 text-yellow-800' },
                    'Em Progresso': { text: 'Em Progresso', classes: 'bg-blue-100 text-blue-800' },
                    'Concluída': { text: 'Concluída', classes: 'bg-green-100 text-green-800' }
                };
                
                const status = statusConfig[task.status] || statusConfig['Pendente'];
                statusElement.textContent = status.text;
                statusElement.className = `task-status px-3 py-1 rounded-full text-xs font-medium ${status.classes}`;

                clone.querySelector('.edit-task').addEventListener('click', () => {
                    window.location.href = `/editar-tarefa/${task.id}`;
                });

                clone.querySelector('.delete-task').addEventListener('click', async () => {
                    if (confirm('Tem certeza que deseja excluir esta tarefa?')) {
                        try {
                            const response = await fetch(`/api/tarefas/${task.id}`, {
                                method: 'DELETE'
                            });
                            
                            if (!response.ok) throw new Error('Erro ao excluir tarefa');
                            
                            showToast('Tarefa excluída com sucesso!');
                            loadTasks();
                        } catch (error) {
                            console.error('Erro ao excluir tarefa:', error);
                            showToast('Erro ao excluir tarefa', 'error');
                        }
                    }
                });

                container.appendChild(clone);
            });
        } catch (error) {
            console.error('Erro ao carregar tarefas:', error);
            showToast('Erro ao carregar tarefas', 'error');
        }
    }

    // Carregar tarefas quando a página carregar
    document.addEventListener('DOMContentLoaded', loadTasks);
</script> 